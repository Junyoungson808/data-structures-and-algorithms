  insert(data) {
    var newNode = new Node(value);
    if(this.root === null) 
      this.root = newNode;
      else
      this.insertNode(this.root, newNode);
  }

  insertNode(node, newNode) {
    if(newNode.data < node.data) {
      if(node.left === null)
        node.left = newNode;
      else 
        this.insertNode(node.left, newNode);
    }
    else {
      if(node.right === null)
        node.right = newNode;
      else
        this.insertNode(node.right, newNode);
    }
  }

  // remove(value) {
  //   this.root = this.removeNode(this.root, value);
  // }

  // removeNode(node, key) {
  //   if(node === null)
  //     return null;
  //   else if(key < node.value) {
  //     node.left = this.removeNode(node.left, key);
  //     return node;
  //   }
  //   else if(key > node.value) {
  //     node.right = this.removeNode(node.right, key);
  //     return node;
  //   }
  //   else {
  //     if(node.left === null && node.right === null) {
  //       node = null;
  //       return node;
  //     }
  //     if(node.left === null) {
  //       node = node.right;
  //       return node;
  //     }
  //     else if(node.right === null) {
  //       node = node.left;
  //       return node;
  //     }
  //     var aux = this.findMinNode(node.right);
  //     node.value = aux.value;
  //     node.right = this.removeNode(node.right, aux.value);
  //     return node;
  //   }
  // }
    findMinNode(node) {
    if(node.left === null)
      return node;
    else
      return this.findMinNode(node.left);
  }

  getRootNode() {
    return this.root;
  }